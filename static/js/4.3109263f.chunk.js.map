{"version":3,"sources":["component/UI/Input/Input-Auth/InputAuth.module.css","component/UI/Button/Button-Auth/ButtonAuth.module.css","containers/Auth/Auth.module.css","component/UI/Input/Input-Auth/InputAuth.js","component/UI/Button/Button-Auth/ButtonAuth.js","containers/Auth/Auth.js"],"names":["module","exports","inputAuth","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","button","disabled","Button","btnType","onClick","clicked","children","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","id","config","form","formElement","loading","Spinner","errorMessage","error","message","authRedirect","isAuthenticated","to","LoginText","onSubmit","SignIn","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.3109263f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"InputAuth_Input__1sz7w\",\"Label\":\"InputAuth_Label__3wpbp\",\"InputElement\":\"InputAuth_InputElement__3tC-W\",\"Invalid\":\"InputAuth_Invalid__3UPFz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"ButtonAuth_Button__2RLa5\",\"Success\":\"ButtonAuth_Success__1yvC3\",\"Danger\":\"ButtonAuth_Danger__3XdOc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3KCOL\",\"LoginText\":\"Auth_LoginText__2cRev\",\"SignIn\":\"Auth_SignIn__3vqAS\"};","import React from \"react\";\r\nimport classes from \"./InputAuth.module.css\"\r\nconst inputAuth = (props) => {\r\n\tlet inputElement = null;\r\n\tconst inputClasses = [classes.InputElement];\r\n\r\n\tif (props.invalid && props.shouldValidate && props.touched) {\r\n\t\tinputClasses.push(classes.Invalid);\r\n\t}\r\n\r\n\tswitch (props.elementType) {\r\n\t\tcase \"input\":\r\n\t\t\tinputElement = (\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName={inputClasses.join(\" \")}\r\n\t\t\t\t\t{...props.elementConfig}\r\n\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t\tonChange={props.changed}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tcase \"textarea\":\r\n\t\t\tinputElement = (\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tclassName={inputClasses.join(\" \")}\r\n\t\t\t\t\t{...props.elementConfig}\r\n\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t\tonChange={props.changed}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tcase \"select\":\r\n\t\t\tinputElement = (\r\n\t\t\t\t<select\r\n\t\t\t\t\tclassName={inputClasses.join(\" \")}\r\n\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t\tonChange={props.changed}\r\n\t\t\t\t>\r\n\t\t\t\t\t{props.elementConfig.options.map((option) => (\r\n\t\t\t\t\t\t<option key={option.value} value={option.value}>\r\n\t\t\t\t\t\t\t{option.displayValue}\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tinputElement = (\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName={inputClasses.join(\" \")}\r\n\t\t\t\t\t{...props.elementConfig}\r\n\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.Input}>\r\n\t\t\t<label className={classes.Label}>{props.label}</label>\r\n\t\t\t{inputElement}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default inputAuth;","import React from \"react\";\r\nimport classes from \"./ButtonAuth.module.css\"\r\n\r\nconst button = (props) => (\r\n\t<button\r\n\t\tdisabled={props.disabled}\r\n\t\tclassName={[classes.Button, classes[props.btnType]].join(\" \")}\r\n\t\tonClick={props.clicked}\r\n\t>\r\n\t\t{props.children}\r\n\t</button>\r\n);\r\n\r\nexport default button;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from \"../../component/UI/Input/Input-Auth/InputAuth\";\r\nimport Button from \"../../component/UI/Button/Button-Auth/ButtonAuth\";\r\nimport ButtonSignIn from \"../../component/UI/Button/Button\";\r\nimport Spinner from \"../../component/UI/Spinner/Spinner\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\nclass Auth extends Component {\r\n\tstate = {\r\n\t\tcontrols: {\r\n\t\t\temail: {\r\n\t\t\t\telementType: \"input\",\r\n\t\t\t\telementConfig: {\r\n\t\t\t\t\ttype: \"email\",\r\n\t\t\t\t\tplaceholder: \"Mail Address\",\r\n\t\t\t\t},\r\n\t\t\t\tvalue: \"\",\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tisEmail: true,\r\n\t\t\t\t},\r\n\t\t\t\tvalid: false,\r\n\t\t\t\ttouched: false,\r\n\t\t\t},\r\n\t\t\tpassword: {\r\n\t\t\t\telementType: \"input\",\r\n\t\t\t\telementConfig: {\r\n\t\t\t\t\ttype: \"password\",\r\n\t\t\t\t\tplaceholder: \"Password\",\r\n\t\t\t\t},\r\n\t\t\t\tvalue: \"\",\r\n\t\t\t\tvalidation: {\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tminLength: 6,\r\n\t\t\t\t},\r\n\t\t\t\tvalid: false,\r\n\t\t\t\ttouched: false,\r\n\t\t\t},\r\n\t\t},\r\n\t\tisSignUp: true,\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tif (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\r\n\t\t\tthis.props.onSetAuthRedirectPath();\r\n\t\t}\r\n\t}\r\n\r\n\t// Before using utility\r\n\t// checkValidity(value, rules) {\r\n\t// \tlet isValid = true;\r\n\t// \tif (!rules) {\r\n\t// \t\treturn true;\r\n\t// \t}\r\n\t// \tif (rules.required) {\r\n\t// \t\tisValid = value.trim() !== \"\" && isValid;\r\n\t// \t}\r\n\t// \tif (rules.minLength) {\r\n\t// \t\tisValid = value.length >= rules.minLength && isValid;\r\n\t// \t}\r\n\t// \tif (rules.maxLength) {\r\n\t// \t\tisValid = value.length <= rules.maxLength && isValid;\r\n\t// \t}\r\n\t// \tif (rules.isEmail) {\r\n\t// \t\tconst pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n\t// \t\tisValid = pattern.test(value) && isValid;\r\n\t// \t}\r\n\r\n\t// \tif (rules.isNumeric) {\r\n\t// \t\tconst pattern = /^\\d+$/;\r\n\t// \t\tisValid = pattern.test(value) && isValid;\r\n\t// \t}\r\n\t// \treturn isValid;\r\n\t// }\r\n\r\n\tinputChangedHandler = (event, controlName) => {\r\n\t\t// use Utility\r\n\t\tconst updatedControls = updateObject(this.state.controls, {\r\n\t\t\t[controlName]: updateObject(this.state.controls[controlName], {\r\n\t\t\t\tvalue: event.target.value,\r\n\t\t\t\tvalid: checkValidity(\r\n\t\t\t\t\tevent.target.value,\r\n\t\t\t\t\tthis.state.controls[controlName].validation\r\n\t\t\t\t),\r\n\t\t\t\ttouched: true,\r\n\t\t\t}),\r\n\t\t});\r\n\t\tthis.setState({ controls: updatedControls });\r\n\r\n\t\t// before using utility\r\n\t\t// const updatedControls = {\r\n\t\t// \t...this.state.controls,\r\n\t\t// \t[controlName]: {\r\n\t\t// \t\t...this.state.controls[controlName],\r\n\t\t// \t\tvalue: event.target.value,\r\n\t\t// valid: this.checkValidity(\r\n\t\t// \tevent.target.value,\r\n\t\t// \tthis.state.controls[controlName].validation\r\n\t\t// ),\r\n\t\t// touched: true,\r\n\t\t// \t},\r\n\t\t// };\r\n\t\t// this.setState({ controls: updatedControls });\r\n\t};\r\n\r\n\tsubmitHandler = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tthis.props.onAuth(\r\n\t\t\tthis.state.controls.email.value,\r\n\t\t\tthis.state.controls.password.value,\r\n\t\t\tthis.state.isSignUp\r\n\t\t);\r\n\t};\r\n\r\n\tswitchAuthModeHandler = () => {\r\n\t\tthis.setState((prevState) => {\r\n\t\t\treturn {\r\n\t\t\t\tisSignUp: !prevState.isSignUp,\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\trender() {\r\n\t\tconst formElementsArray = [];\r\n\t\tfor (let key in this.state.controls) {\r\n\t\t\tformElementsArray.push({\r\n\t\t\t\tid: key,\r\n\t\t\t\tconfig: this.state.controls[key],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tlet form = formElementsArray.map((formElement) => (\r\n\t\t\t<Input\r\n\t\t\t\tkey={formElement.id}\r\n\t\t\t\telementType={formElement.config.elementType}\r\n\t\t\t\telementConfig={formElement.config.elementConfig}\r\n\t\t\t\tvalue={formElement.config.value}\r\n\t\t\t\tinvalid={!formElement.config.valid}\r\n\t\t\t\tshouldValidate={formElement.config.validation}\r\n\t\t\t\ttouched={formElement.config.touched}\r\n\t\t\t\tchanged={(event) =>\r\n\t\t\t\t\tthis.inputChangedHandler(event, formElement.id)\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t));\r\n\r\n\t\tif (this.props.loading) {\r\n\t\t\tform = <Spinner />;\r\n\t\t}\r\n\r\n\t\tlet errorMessage = null;\r\n\r\n\t\tif (this.props.error) {\r\n\t\t\terrorMessage = <p>{this.props.error.message}</p>;\r\n\t\t}\r\n\r\n\t\tlet authRedirect = null;\r\n\t\tif (this.props.isAuthenticated) {\r\n\t\t\tauthRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className={classes.Auth}>\r\n\t\t\t\t<div className={classes.LoginText}>\r\n\t\t\t\t\tLog In to Your Burger Account!\r\n\t\t\t\t</div>\r\n\t\t\t\t{authRedirect}\r\n\t\t\t\t{errorMessage}\r\n\t\t\t\t<form onSubmit={this.submitHandler}>\r\n\t\t\t\t\t{form}\r\n\t\t\t\t\t<Button btnType=\"Success\">LOGIN</Button>\r\n\t\t\t\t</form>\r\n\r\n\t\t\t\t<div className={classes.SignIn}>\r\n\t\t\t\t\t<ButtonSignIn\r\n\t\t\t\t\t\tclicked={this.switchAuthModeHandler}\r\n\t\t\t\t\t\tbtnType=\"Danger\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSwitch to {this.state.isSignUp ? \"Sign in\" : \"Sign up\"}\r\n\t\t\t\t\t</ButtonSignIn>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tloading: state.auth.loading,\r\n\t\terror: state.auth.error,\r\n\t\tisAuthenticated: state.auth.token !== null,\r\n\t\tbuildingBurger: state.burgerBuilder.building,\r\n\t\tauthRedirectPath: state.auth.authRedirectPath,\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonAuth: (email, password, isSignUp) =>\r\n\t\t\tdispatch(actions.auth(email, password, isSignUp)),\r\n\t\tonSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}